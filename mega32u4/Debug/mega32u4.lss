
mega32u4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000003f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000050f  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001dd  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000428  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f7  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f4  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_25>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a8 30       	cpi	r26, 0x08	; 8
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  cc:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <_Z8SPI_initv>:
}


//----------------------------user defined functions---------------------------------
void SPI_init(){	//initialize SPI as master
	PRR0 &= ~(1<<PRSPI); //enable SPI module in PRR; page 167; Page 43
  d4:	e4 e6       	ldi	r30, 0x64	; 100
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	80 83       	st	Z, r24
	
	//Do not enable interrupt if not necessary
	//SPCR |= 1<<SPIE;	//enable SPI interrupt; page 171
	SPCR &= ~(1<<DORD);	//MSB to be transmitted first; page 171		
  de:	8c b5       	in	r24, 0x2c	; 44
  e0:	8f 7d       	andi	r24, 0xDF	; 223
  e2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<MSTR);	//enable master mode; page 171
  e4:	8c b5       	in	r24, 0x2c	; 44
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<CPOL | 1<<CPHA);	//SPI clk is low when idle; Data is valid on leading edge; page 171
  ea:	8c b5       	in	r24, 0x2c	; 44
  ec:	83 7f       	andi	r24, 0xF3	; 243
  ee:	8c bd       	out	0x2c, r24	; 44
	DDRB |= 1<<DDB1 | 1<<DDB2;	//set PB2/MOSI and PB1/SCK as output
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	86 60       	ori	r24, 0x06	; 6
  f4:	84 b9       	out	0x04, r24	; 4
									// MISO is override as Input; p168
	
	SPCR &= ~(1<<SPR1 | 1<<SPR0);
  f6:	8c b5       	in	r24, 0x2c	; 44
  f8:	8c 7f       	andi	r24, 0xFC	; 252
  fa:	8c bd       	out	0x2c, r24	; 44
	SPSR |= 1<<SPI2X;	//set SPI CLK frequency; p172; f_clk = f_osc/2
  fc:	8d b5       	in	r24, 0x2d	; 45
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	8d bd       	out	0x2d, r24	; 45
									
	SPCR |= 1<<SPE;	//enable SPI module in SPI control Register; page 171
 102:	8c b5       	in	r24, 0x2c	; 44
 104:	80 64       	ori	r24, 0x40	; 64
 106:	8c bd       	out	0x2c, r24	; 44
 108:	08 95       	ret

0000010a <_Z6SPI_TXhhh>:

//PORT = one of the four phase shifter to have LE pulse applied
//DPS_cmd = desired phase shift
//bit_sh = number of bit shift (left) to the DPS_cmd
void SPI_TX(uint8_t PORT, uint8_t DPS_cmd, uint8_t bit_sh){	
	DPS_cmd = DPS_cmd << bit_sh;	//shift bit according to the phase shifter datasheet
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <_Z6SPI_TXhhh+0x8>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	4a 95       	dec	r20
 114:	e2 f7       	brpl	.-8      	; 0x10e <_Z6SPI_TXhhh+0x4>
	
	SPDR = DPS_cmd;	//place data to SPI data buffer to start sending the data
 116:	6e bd       	out	0x2e, r22	; 46
	//SPIF bit is set when a SPI transfer is complete; p158
	//SPIF bit is cleared by reading SPSR register with SPIF set, then accessing SPDR; page 172
	while(!(SPSR & (1<<SPIF))){
 118:	0d b4       	in	r0, 0x2d	; 45
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <_Z6SPI_TXhhh+0xe>
		;
	}
	data_dump = SPDR;	//clear SPIF bit
 11e:	9e b5       	in	r25, 0x2e	; 46
 120:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <data_dump>
	//selectively apply LE pulse after data is transmitted	
	/* delay is required by the phase shifter, but the hardware cannot create a pulse that is as short as 1 cpu cycle
	   assuming the clk is running at 16MHz because of the parasitic capacitance; consider adding an amp as a buffer
	   to remove the charges faster;
	   _delay_loop_1(count) time = 1/CPU_clk*3*count; or 3 CPU_clk time per loop  */	
	if(PORT == PORT1){	//LE1
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	41 f4       	brne	.+16     	; 0x138 <_Z6SPI_TXhhh+0x2e>
		PINB |= 1<<PINB6;	//toggle high
 128:	1e 9a       	sbi	0x03, 6	; 3
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 12a:	98 2f       	mov	r25, r24
 12c:	9a 95       	dec	r25
 12e:	f1 f7       	brne	.-4      	; 0x12c <_Z6SPI_TXhhh+0x22>
		_delay_loop_1(LE_t);
		//_NOP();	//delay by 1 cpu cycle
		PINB |= 1<<PINB6;	//toggle low
 130:	1e 9a       	sbi	0x03, 6	; 3
		LE1_led = 1;
 132:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LE1_led>
 136:	08 95       	ret
	} else if (PORT == PORT2){	//LE2
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	49 f4       	brne	.+18     	; 0x14e <_Z6SPI_TXhhh+0x44>
		PINB |= 1<<PINB5;	//toggle high
 13c:	1d 9a       	sbi	0x03, 5	; 3
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	98 2f       	mov	r25, r24
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <_Z6SPI_TXhhh+0x38>
		_delay_loop_1(LE_t);
		PINB |= 1<<PINB5;	//toggle low
 146:	1d 9a       	sbi	0x03, 5	; 3
		LE2_led = 1;
 148:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LE2_led>
 14c:	08 95       	ret
	} else if (PORT == PORT3){	//LE3
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	49 f4       	brne	.+18     	; 0x164 <_Z6SPI_TXhhh+0x5a>
		PINB |= 1<<PINB4;	//toggle high		
 152:	1c 9a       	sbi	0x03, 4	; 3
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	98 2f       	mov	r25, r24
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <_Z6SPI_TXhhh+0x4e>
		_delay_loop_1(LE_t);
		PINB |= 1<<PINB4;	//toggle low
 15c:	1c 9a       	sbi	0x03, 4	; 3
		LE3_led = 1;
 15e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LE3_led>
 162:	08 95       	ret
	} else if (PORT == PORT4){	//LE4
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	41 f4       	brne	.+16     	; 0x178 <_Z6SPI_TXhhh+0x6e>
		PINB |= 1<<PINB7;	//toggle high		
 168:	1f 9a       	sbi	0x03, 7	; 3
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	98 2f       	mov	r25, r24
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <_Z6SPI_TXhhh+0x64>
		_delay_loop_1(LE_t);
		PINB |= 1<<PINB7;	//toggle low
 172:	1f 9a       	sbi	0x03, 7	; 3
		LE4_led = 1;
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 178:	08 95       	ret

0000017a <_Z11USART1_inith>:
	}	
}

void USART1_init(uint8_t baud_rate){	
	PRR1 &= ~(1<<PRUSART1);	//enable USART module in PRR; page43
 17a:	e5 e6       	ldi	r30, 0x65	; 101
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	9e 7f       	andi	r25, 0xFE	; 254
 182:	90 83       	st	Z, r25
	UCSR1C &= ~((1<<UMSEL11) | (1<<UMSEL10));	//enable asynchronous mode in USART1; page 194
 184:	ea ec       	ldi	r30, 0xCA	; 202
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	90 81       	ld	r25, Z
 18a:	9f 73       	andi	r25, 0x3F	; 63
 18c:	90 83       	st	Z, r25
	UCSR1C &= ~((1<<UPM11)|(1<<UPM10));	//disable parity check; page 195
 18e:	90 81       	ld	r25, Z
 190:	9f 7c       	andi	r25, 0xCF	; 207
 192:	90 83       	st	Z, r25
	UCSR1C &= ~(1<<USBS1);	//use 1 stop bit; page 195
 194:	90 81       	ld	r25, Z
 196:	97 7f       	andi	r25, 0xF7	; 247
 198:	90 83       	st	Z, r25
	UCSR1C |= ((1<<UCSZ11) | (1<<UCSZ10));	//use 8 character per frame; page 195
 19a:	90 81       	ld	r25, Z
 19c:	96 60       	ori	r25, 0x06	; 6
 19e:	90 83       	st	Z, r25
	UCSR1B &= ~(1<<UCSZ12);	//use 8 character per frame; page 195
 1a0:	a9 ec       	ldi	r26, 0xC9	; 201
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	9c 91       	ld	r25, X
 1a6:	9b 7f       	andi	r25, 0xFB	; 251
 1a8:	9c 93       	st	X, r25
	UCSR1C &= ~(1<<UCPOL1);		//Clk polarity; write zero when using asynchronous mode; page 195
 1aa:	90 81       	ld	r25, Z
 1ac:	9e 7f       	andi	r25, 0xFE	; 254
 1ae:	90 83       	st	Z, r25
	UBRR1 = baud_rate;	//set the baud_rate; page 196
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1b6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1B |= 1<<RXCIE1;	//enable RX complete Interrupt; page 193	
 1ba:	8c 91       	ld	r24, X
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	8c 93       	st	X, r24
	UCSR1B |= (1<<TXEN1);	//enable transmitter; page 194
 1c0:	8c 91       	ld	r24, X
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	8c 93       	st	X, r24
	UCSR1B |= (1<<RXEN1);	//enable receiver; page 194	
 1c6:	8c 91       	ld	r24, X
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	8c 93       	st	X, r24
 1cc:	08 95       	ret

000001ce <_Z9USART1_TXh>:
}

void USART1_TX(uint8_t TX_byte){
	UDR1 = TX_byte;		//place data to USART1 data buffer and initiate data transfer; page
 1ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	while(!(UCSR1A & (1<<TXC1))){	//TXC1 bit is set if USART1 transfer is complete; page 
 1d2:	e8 ec       	ldi	r30, 0xC8	; 200
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	86 ff       	sbrs	r24, 6
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <_Z9USART1_TXh+0x8>
		;
	}
	UCSR1A |= 1<<TXC1;	//clear USART1 transmit complete signal; page 
 1dc:	e8 ec       	ldi	r30, 0xC8	; 200
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <main>:

int main(void){
	const uint16_t delay_t = 1000;	//Debug LED flash
	bool less_delay = false;	//compensate for LEx_led delay
	
	cli();//Disable Global Interrupt
 1e8:	f8 94       	cli
	SPI_init();
 1ea:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z8SPI_initv>
	USART1_init(103);	//9600 baud rate
 1ee:	87 e6       	ldi	r24, 0x67	; 103
 1f0:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z11USART1_inith>
	sei();	//Enable Global Interrupt
 1f4:	78 94       	sei
	
	//set port as output
	//short pulse to execute the cmd received by the phase shifter
	DDRB |= 1<<DDB6;	//LE1 pulse
 1f6:	26 9a       	sbi	0x04, 6	; 4
	DDRB |= 1<<DDB5;	//LE2 pulse
 1f8:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<DDB4;	//LE3 pulse
 1fa:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= 1<<DDB7;	//LE4 pulse
 1fc:	27 9a       	sbi	0x04, 7	; 4
	
	//LED flashes after LE1 pulse is applied
	DDRE |= 1<<DDE6;	//PE6; LE1 LED
 1fe:	6e 9a       	sbi	0x0d, 6	; 13
	DDRC |= 1<<DDC7;	//PC7; LE2 LED
 200:	3f 9a       	sbi	0x07, 7	; 7
	DDRC |= 1<<DDC6;	//PC6; LE3 LED
 202:	3e 9a       	sbi	0x07, 6	; 7
	DDRD |= 1<<DDD7;	//PD7; LE4 LED
 204:	57 9a       	sbi	0x0a, 7	; 10
	
	DDRB |= 1<<DDB0;	//debug; set port as output
 206:	20 9a       	sbi	0x04, 0	; 4
	
	DDRD |= 1<<DDD5;	//set as output
 208:	55 9a       	sbi	0x0a, 5	; 10
	PORTD |= 1<<DDD5;	//turn off LED
 20a:	5d 9a       	sbi	0x0b, 5	; 11
 20c:	c0 e0       	ldi	r28, 0x00	; 0
		if(LE1_led == 1){
			LE1_led = 0;
			PINE |= 1<<PINE6;	//turn on
			_delay_ms(LEx_led_t);
			PINE |= 1<<PINE6;	//turn off
			less_delay = true;
 20e:	d1 e0       	ldi	r29, 0x01	; 1
	
	DDRD |= 1<<DDD5;	//set as output
	PORTD |= 1<<DDD5;	//turn off LED
	
    while (1){							
		PINB |= 1<<PINB0;		
 210:	18 9a       	sbi	0x03, 0	; 3
		
		USART1_TX(0x15);
 212:	85 e1       	ldi	r24, 0x15	; 21
 214:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z9USART1_TXh>
		
		if(LE1_led == 1){
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <LE1_led>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	79 f4       	brne	.+30     	; 0x23e <main+0x56>
			LE1_led = 0;
 220:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <LE1_led>
			PINE |= 1<<PINE6;	//turn on
 224:	66 9a       	sbi	0x0c, 6	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	80 e7       	ldi	r24, 0x70	; 112
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x44>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x4e>
 236:	00 00       	nop
			_delay_ms(LEx_led_t);
			PINE |= 1<<PINE6;	//turn off
 238:	66 9a       	sbi	0x0c, 6	; 12
			less_delay = true;
 23a:	9d 2f       	mov	r25, r29
 23c:	01 c0       	rjmp	.+2      	; 0x240 <main+0x58>
 23e:	9c 2f       	mov	r25, r28
		}
		if(LE2_led == 1){
 240:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LE2_led>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	71 f4       	brne	.+28     	; 0x264 <main+0x7c>
			LE2_led = 0;
 248:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <LE2_led>
			PINC |= 1<<PINC7;	//turn on
 24c:	37 9a       	sbi	0x06, 7	; 6
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	80 e7       	ldi	r24, 0x70	; 112
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x6c>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x76>
 25e:	00 00       	nop
			_delay_ms(LEx_led_t);
			PINC |= 1<<PINC7;	//turn off
 260:	37 9a       	sbi	0x06, 7	; 6
			less_delay = true;
 262:	9d 2f       	mov	r25, r29
		}
		if(LE3_led == 1){
 264:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LE3_led>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	91 f4       	brne	.+36     	; 0x290 <main+0xa8>
			LE3_led = 0;
 26c:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <LE3_led>
			PINC |= 1<<PINC6;	//turn on
 270:	36 9a       	sbi	0x06, 6	; 6
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	80 e7       	ldi	r24, 0x70	; 112
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x90>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x9a>
 282:	00 00       	nop
			_delay_ms(LEx_led_t);
			PINC |= 1<<PINC6;	//turn off
 284:	36 9a       	sbi	0x06, 6	; 6
			less_delay = true;
		} 
		if(LE4_led == 1){
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	a9 f4       	brne	.+42     	; 0x2b8 <main+0xd0>
 28e:	04 c0       	rjmp	.+8      	; 0x298 <main+0xb0>
 290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	71 f4       	brne	.+28     	; 0x2b4 <main+0xcc>
			LE4_led = 0;
 298:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
			PIND |= 1<<PIND7;	//turn on
 29c:	4f 9a       	sbi	0x09, 7	; 9
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	80 e7       	ldi	r24, 0x70	; 112
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0xbc>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0xc6>
 2ae:	00 00       	nop
			_delay_ms(LEx_led_t);
			PIND |= 1<<PIND7;	//turn off
 2b0:	4f 9a       	sbi	0x09, 7	; 9
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0xd0>
			less_delay = true;
		}				
		
		if(less_delay){
 2b4:	99 23       	and	r25, r25
 2b6:	51 f0       	breq	.+20     	; 0x2cc <main+0xe4>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	82 e6       	ldi	r24, 0x62	; 98
 2bc:	9e e2       	ldi	r25, 0x2E	; 46
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0xd6>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0xe0>
 2c8:	00 00       	nop
 2ca:	a2 cf       	rjmp	.-188    	; 0x210 <main+0x28>
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	83 ed       	ldi	r24, 0xD3	; 211
 2d0:	90 e3       	ldi	r25, 0x30	; 48
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0xea>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0xf4>
 2dc:	00 00       	nop
 2de:	98 cf       	rjmp	.-208    	; 0x210 <main+0x28>

000002e0 <__vector_25>:

//----------------------------Interrupt Routine---------------------------------
//USART1 Receive complete interrupt service routine
//clear RXCn bit by reading receiver buffer, UDR1
//send data using SPI to digital phase shifter here
ISR(USART1_RX_vect, ISR_BLOCK){		
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	++usart_byte_count;		//expect to receive 4 commands
 302:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <usart_byte_count>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <usart_byte_count>
	uint8_t RX_byte = UDR1;	//read data from USART1 buffer
 30c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	if(usart_byte_count == 1){
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	41 f4       	brne	.+16     	; 0x324 <__vector_25+0x44>
		if(RX_byte == 0xFF){	//cmd sync
 314:	6f 3f       	cpi	r22, 0xFF	; 255
 316:	19 f4       	brne	.+6      	; 0x31e <__vector_25+0x3e>
			cmd_start = true;
 318:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <cmd_start>
 31c:	20 c0       	rjmp	.+64     	; 0x35e <__vector_25+0x7e>
		} else {	//reset count if no start of cmd detected
			usart_byte_count = 0;
 31e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <usart_byte_count>
 322:	1d c0       	rjmp	.+58     	; 0x35e <__vector_25+0x7e>
		}
	} else if(cmd_start){
 324:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <cmd_start>
 328:	99 23       	and	r25, r25
 32a:	c9 f0       	breq	.+50     	; 0x35e <__vector_25+0x7e>
		if(usart_byte_count == 2){		// second byte contains address
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	39 f4       	brne	.+14     	; 0x33e <__vector_25+0x5e>
			if(RX_byte != DPS_addr){	//if address does not match
 330:	65 30       	cpi	r22, 0x05	; 5
 332:	a9 f0       	breq	.+42     	; 0x35e <__vector_25+0x7e>
				usart_byte_count = 0;	//restart	
 334:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <usart_byte_count>
				cmd_start = false;
 338:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cmd_start>
 33c:	10 c0       	rjmp	.+32     	; 0x35e <__vector_25+0x7e>
			}
		} else if(usart_byte_count == 3){	//port number
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	19 f4       	brne	.+6      	; 0x348 <__vector_25+0x68>
			port_num = RX_byte;	//read port number
 342:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <port_num>
 346:	0b c0       	rjmp	.+22     	; 0x35e <__vector_25+0x7e>
		} else if(usart_byte_count == 4){				//phase shift		
 348:	84 30       	cpi	r24, 0x04	; 4
 34a:	49 f4       	brne	.+18     	; 0x35e <__vector_25+0x7e>
			//read data from USART buffer 1 then send to DPS chip										
			SPI_TX(port_num, RX_byte, bit_sh);		
 34c:	42 e0       	ldi	r20, 0x02	; 2
 34e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <port_num>
 352:	0e 94 85 00 	call	0x10a	; 0x10a <_Z6SPI_TXhhh>
			usart_byte_count = 0;
 356:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <usart_byte_count>
			cmd_start = false;
 35a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <cmd_start>
		}	//end of else if
	}	//end of else if
}	//end of ISR
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
