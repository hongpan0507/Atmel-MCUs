
tiny841_usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002dd  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000018d  00000000  00000000  00000609  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001eb  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000296  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	25 c0       	rjmp	.+74     	; 0x74 <__vector_20>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	22 c0       	rjmp	.+68     	; 0x72 <__bad_interrupt>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	20 c0       	rjmp	.+64     	; 0x72 <__bad_interrupt>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	41 c0       	rjmp	.+130    	; 0xbe <__vector_29>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e2 ef       	ldi	r30, 0xF2	; 242
  50:	f1 e0       	ldi	r31, 0x01	; 1
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a0 30       	cpi	r26, 0x00	; 0
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	a0 e0       	ldi	r26, 0x00	; 0
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	a2 30       	cpi	r26, 0x02	; 2
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	a6 d0       	rcall	.+332    	; 0x1bc <main>
  70:	be c0       	rjmp	.+380    	; 0x1ee <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_20>:
}

//------------------------------Interrupt Service Routine--------------------------------------------------------------
//SPIF bit is set when a serial transfer is complete; p158
//SPIF bit is cleared by hardware when the corresponding interrupt is served; page 158
ISR(SPI_vect, ISR_BLOCK){	//SPI interrupt service routine; blocking all other interrupts
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	ef 93       	push	r30
  82:	ff 93       	push	r31
	//send data to digital phase shifter here
	data_in = SPDR;		//read data from SPI buffer
  84:	80 91 b0 00 	lds	r24, 0x00B0
  88:	80 93 01 01 	sts	0x0101, r24
	UDR0 = data_in;		//place data to USART0 data buffer and initiate data transfer; page 190
  8c:	80 91 01 01 	lds	r24, 0x0101
  90:	80 93 80 00 	sts	0x0080, r24
	while(!(UCSR0A & (1<<TXC0))){	//TXC0 bit is set if USART0_SPI transfer is complete; page 193
  94:	e6 e8       	ldi	r30, 0x86	; 134
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 ff       	sbrs	r24, 6
  9c:	fd cf       	rjmp	.-6      	; 0x98 <__vector_20+0x24>
		;
	}
	UCSR0A |= 1<<TXC0;	//clear USART0_SPI transmit complete signal; page 193
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
	received_signal = true;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 00 01 	sts	0x0100, r24
}
  ae:	ff 91       	pop	r31
  b0:	ef 91       	pop	r30
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_29>:

ISR(TWI_SLAVE_vect, ISR_BLOCK){	//I2C interrupt service routine; blocking all other interrupts
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	//send data to digital phase shifter here
	if(TWSSRA & (1<<TWASIF)){	//address/stop detection; page 206
  ce:	80 91 a3 00 	lds	r24, 0x00A3
  d2:	86 ff       	sbrs	r24, 6
  d4:	0c c0       	rjmp	.+24     	; 0xee <__vector_29+0x30>
		if(TWSSRA & (1<<TWAS)){		//address detection; page 207
  d6:	80 91 a3 00 	lds	r24, 0x00A3
  da:	80 ff       	sbrs	r24, 0
  dc:	08 c0       	rjmp	.+16     	; 0xee <__vector_29+0x30>
			TWSCRB &= ~(1<<TWAA);	//send ACK; page 206
  de:	e4 ea       	ldi	r30, 0xA4	; 164
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	80 83       	st	Z, r24
			TWSCRB |= ((1<<TWCMD0) | (1<<TWCMD1));		//ACK + clear TWI Address/Stop Interrupt Flag; page 206
  e8:	80 81       	ld	r24, Z
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	80 83       	st	Z, r24
		}
	}
	if(TWSSRA & (1<<TWDIF)){	//data receive complete detection; page 207
  ee:	80 91 a3 00 	lds	r24, 0x00A3
  f2:	88 23       	and	r24, r24
  f4:	e4 f4       	brge	.+56     	; 0x12e <__vector_29+0x70>
		TWSCRB |= 1<<TWAA;	//send NACK; page 206
  f6:	e4 ea       	ldi	r30, 0xA4	; 164
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	80 83       	st	Z, r24
		data_in = TWSD;		//automatic NACK in smart mode; page 206
 100:	80 91 a0 00 	lds	r24, 0x00A0
 104:	80 93 01 01 	sts	0x0101, r24
		UDR0 = data_in;		//place data to USART0 data buffer and initiate data transfer; page 190
 108:	80 91 01 01 	lds	r24, 0x0101
 10c:	80 93 80 00 	sts	0x0080, r24
		while(!(UCSR0A & (1<<TXC0))){	//TXC0 bit is set if USART0_SPI transfer is complete; page 193
 110:	e6 e8       	ldi	r30, 0x86	; 134
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	86 ff       	sbrs	r24, 6
 118:	fd cf       	rjmp	.-6      	; 0x114 <__vector_29+0x56>
			;
		}
		UCSR0A |= 1<<TXC0;	//clear USART0_SPI transmit complete signal; page 193
 11a:	e6 e8       	ldi	r30, 0x86	; 134
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
		TWSSRA |= 1<<TWDIF;		//clear TWI data interrupt flag; page 207
 124:	e3 ea       	ldi	r30, 0xA3	; 163
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24
	}
	received_signal = true;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 00 01 	sts	0x0100, r24
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_Z11USART1_inith>:

//---------------------------------------------------------------------------------------------------------------------

//------------------------------User Defined Functions--------------------------------------------------------------
void USART1_init(uint8_t baud_rate){	//initialize USART1 module as asynchronous slave mode  
	PRR &= ~(1<<PRUSART1);	//enable USART1 module in PRR; page39; page 160		
 144:	e0 e7       	ldi	r30, 0x70	; 112
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	90 81       	ld	r25, Z
 14a:	9f 7b       	andi	r25, 0xBF	; 191
 14c:	90 83       	st	Z, r25
	UCSR1C &= ~((1<<UMSEL11) | (1<<UMSEL10));	//enable asynchronous mode in USART1; page 183
 14e:	e4 e9       	ldi	r30, 0x94	; 148
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	90 81       	ld	r25, Z
 154:	9f 73       	andi	r25, 0x3F	; 63
 156:	90 83       	st	Z, r25
	UCSR1C &= ~((1<<UPM11)|(1<<UPM10));	//disable parity check; page 184
 158:	90 81       	ld	r25, Z
 15a:	9f 7c       	andi	r25, 0xCF	; 207
 15c:	90 83       	st	Z, r25
	UCSR1C &= ~(1<<USBS1);	//use 1 stop bit; page 184
 15e:	90 81       	ld	r25, Z
 160:	97 7f       	andi	r25, 0xF7	; 247
 162:	90 83       	st	Z, r25
	UCSR1C |= ((1<<UCSZ11) | (1<<UCSZ10));	//use 8 character per frame; page 184
 164:	90 81       	ld	r25, Z
 166:	96 60       	ori	r25, 0x06	; 6
 168:	90 83       	st	Z, r25
	UCSR1B &= ~(1<<UCSZ12);	//use 8 character per frame; page 184
 16a:	a5 e9       	ldi	r26, 0x95	; 149
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	9c 91       	ld	r25, X
 170:	9b 7f       	andi	r25, 0xFB	; 251
 172:	9c 93       	st	X, r25
	UCSR1C &= ~(1<<UCPOL1);		//Clk polarity; write zero when using asynchronous mode; page 184
 174:	90 81       	ld	r25, Z
 176:	9e 7f       	andi	r25, 0xFE	; 254
 178:	90 83       	st	Z, r25
	UBRR1 = baud_rate;	//set the baud_rate; page 179
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 92 00 	sts	0x0092, r25
 180:	80 93 91 00 	sts	0x0091, r24
	UCSR1B |= 1<<RXCIE1;	//enable RX complete Interrupt; page 182
 184:	8c 91       	ld	r24, X
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8c 93       	st	X, r24
	UCSR1D |= 1<<RXSIE1;	//enable RX start interrupt; page 185
 18a:	e3 e9       	ldi	r30, 0x93	; 147
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	80 83       	st	Z, r24
	UCSR1B |= (1<<TXEN1);	//enable transmitter; page 182
 194:	8c 91       	ld	r24, X
 196:	88 60       	ori	r24, 0x08	; 8
 198:	8c 93       	st	X, r24
	UCSR1B |= (1<<RXEN1);	//enable receiver; page 182
 19a:	8c 91       	ld	r24, X
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	8c 93       	st	X, r24
 1a0:	08 95       	ret

000001a2 <_Z9USART1_TXh>:
	UCSR0B &= ~(1<<RXEN0);	//disable receiver; page 194
	UBRR0 = baud_rate;	//set the baud_rate; baud_rate = 0 -> 1Mbps; page 180
}

void USART1_TX(uint8_t data_out){
	UDR1 = data_out;
 1a2:	80 93 90 00 	sts	0x0090, r24
	while(!(UCSR1A & (1<<TXC1))){	//TXC1 bit is set if USART0_SPI transfer is complete; page 181
 1a6:	e6 e9       	ldi	r30, 0x96	; 150
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	86 ff       	sbrs	r24, 6
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <_Z9USART1_TXh+0x8>
		;
	}
	UCSR1A |= 1<<TXC1;	//clear USART1 transmit complete signal; page 181	
 1b0:	e6 e9       	ldi	r30, 0x96	; 150
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	80 64       	ori	r24, 0x40	; 64
 1b8:	80 83       	st	Z, r24
 1ba:	08 95       	ret

000001bc <main>:
 volatile uint8_t data_in = 0;	//receive data
 volatile uint8_t data_out[] = {0x15, 0xAB, 0x04, 0x45};	//send data
 volatile bool received_signal = false;	//flash LED

int main(){
	DDRB |= 1<<DDRB2;	//set PB2 as output to flash LED
 1bc:	ba 9a       	sbi	0x17, 2	; 23
	DDRA |= 1<<DDRA7;	//set PA7 as output to flash LED	
 1be:	d7 9a       	sbi	0x1a, 7	; 26
	cli();	//disable global interrupt; atmel built-in function
 1c0:	f8 94       	cli
	//USART0_SPI_init(0);	//initialize USART0 module; user defined function; set the baud_rate to 1Mbps; page 180
	USART1_init(103);	//initialize USART1 module; user defined function; set the baud_rate to 9600; page 179
 1c2:	87 e6       	ldi	r24, 0x67	; 103
 1c4:	bf df       	rcall	.-130    	; 0x144 <_Z11USART1_inith>
	//I2C_init(0x08);		//initialize I2C module with address = 0x08; user defined function
	//SPI_init();	//initialize SPI module; user defined function
	sei();	//enable global interrupt; atmel built-in function
 1c6:	78 94       	sei
		 
	while(1){
		USART1_TX(0xFF);	//start detection
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	eb df       	rcall	.-42     	; 0x1a2 <_Z9USART1_TXh>
		USART1_TX(0x05);	//address
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	e9 df       	rcall	.-46     	; 0x1a2 <_Z9USART1_TXh>
		USART1_TX(0x03);	//port number
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	e7 df       	rcall	.-50     	; 0x1a2 <_Z9USART1_TXh>
		USART1_TX(0x21);	//phase shift
 1d4:	81 e2       	ldi	r24, 0x21	; 33
 1d6:	e5 df       	rcall	.-54     	; 0x1a2 <_Z9USART1_TXh>
		PINA |= 1<<PINA7;
 1d8:	cf 9a       	sbi	0x19, 7	; 25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	8d e3       	ldi	r24, 0x3D	; 61
 1de:	99 e4       	ldi	r25, 0x49	; 73
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x24>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x2e>
 1ea:	00 00       	nop
 1ec:	ed cf       	rjmp	.-38     	; 0x1c8 <main+0xc>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
